import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "./components/theme-provider";
import { Navbar } from "./components/Navbar";
import prisma from "./lib/db";
import { getKindeServerSession } from "@kinde-oss/kinde-auth-nextjs/server";
import { unstable_noStore as noStore } from "next/cache";
import { Linkedin, Instagram, Mail } from "lucide-react"

import { MobileNavbar } from "./components/MobileNavbar";



const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

async function getData({
  email,
  id,
  firstName,
  lastName,
  profileImage,
}: {
  email: string;
  id: string;
  firstName: string | undefined | null;
  lastName: string | undefined | null;
  profileImage: string | undefined | null;
}) {
  noStore();
  
const user = await prisma.user.findUnique({
    where: {
      id: id,
    },
  });

  if (!user) {
    const name = `${firstName ?? ""} ${lastName ?? ""}`;
    return await prisma.user.create({
      data: {
        id: id,
        email: email,
        name: name,
      },
    });
  }
  
  await prisma.user.update({
    where: { id: user?.id as string },
    data: { lastLogin: new Date() },
  });

  return user
  
}



export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const { getUser, isAuthenticated } = getKindeServerSession();
  const user = await getUser();
  const authed = await isAuthenticated();
  const data = user? 
    await getData({
      email: user.email as string,
      firstName: user.given_name as string,
      id: user.id as string,
      lastName: user.family_name as string,
      profileImage: user.picture,
    }):null;  



  return (
    <html lang="en">
      <body
        className={`${inter.className} ${data?.colorScheme ?? "theme-violet"}`}
      >
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
          >
          {/* Desktop Navbar */}
  <div className={!authed?"hidden md:block":""}>
    <Navbar />
  </div>

  {/* Mobile Navbar */}
  {!authed&&(
          <MobileNavbar isAuthenticated={authed} user={user} dbUser={data} />
          )}


  {data?.status === "SUSPENDED" 
    ? "You are suspended by now contact an admin" 
    : children}

          <div className="border-t bg-gray-50 dark:bg-gray-900 mt-20">
  <div className="mx-auto max-w-6xl px-6 py-6 flex flex-col md:flex-row md:justify-between items-center text-sm text-gray-600 dark:text-gray-400 gap-4">
    <span className="text-center md:text-left">© 2025 Byte Brigade – Tous droits réservés.</span>
    <div className="flex flex-col items-center text-center gap-2">
      <div>Conçu avec ❤️ par le Club Informatique Byte Brigade</div>
      <nav className="flex gap-6">
        <a href="https://www.linkedin.com/in/bytebrigade..." target="_blank" rel="noopener noreferrer">
          <Linkedin className="h-5 w-5" />
        </a>
        <a href="https://www.instagram.com/byte.brigade.club" target="_blank" rel="noopener noreferrer">
          <Instagram className="h-5 w-5" />
        </a>
        <a href="mailto:bytebrigadeclub@gmail.com">
          <Mail className="h-5 w-5" />
        </a>
      </nav>
    </div>
  </div>
</div>


        </ThemeProvider>
      </body>
      
    </html>
  );
}
